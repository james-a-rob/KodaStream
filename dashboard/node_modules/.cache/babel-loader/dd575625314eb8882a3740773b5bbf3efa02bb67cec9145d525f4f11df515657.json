{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { hydrate } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nfunction useHydrate(state, options = {}) {\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const optionsRef = React.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\nconst Hydrate = ({\n  children,\n  options,\n  state\n}) => {\n  useHydrate(state, options);\n  return children;\n};\nexport { Hydrate, useHydrate };","map":{"version":3,"names":["useHydrate","state","options","optionsRef","React","useRef","current","queryClient","Hydrate","children"],"sources":["/Users/jamesrobertson/Code/air/dashboard/node_modules/@tanstack/react-query/src/Hydrate.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { HydrateOptions } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\n\nexport function useHydrate(\n  state: unknown,\n  options: HydrateOptions & ContextOptions = {},\n) {\n  const queryClient = useQueryClient({ context: options.context })\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n}\n\nexport const Hydrate = ({ children, options, state }: HydrateProps) => {\n  useHydrate(state, options)\n  return children as React.ReactElement\n}\n"],"mappings":";;;;;AAQO,SAAAA,WAAAC,KAAA,EAAAC,OAAA;;;EAI8B;EAEnC,MAAAC,UAAA,GAAAC,KAAA,CAAAC,MAAA,CAAAH,OAAA;EACAC,UAAA,CAAAG,OAAA,GAAAJ,OAAA;EAGA;EACA;EACA;;;IAEE,IAAAD,KAAA;;IAEC;EACF,IAAAM,WAAA,EAAAN,KAAA;AACF;AAQM,MAAAO,OAAA,GAAAA,CAAA;;;EAAsCP;AAArB;EACtBD,UAAA,CAAAC,KAAA,EAAAC,OAAA;EACA,OAAAO,QAAA;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}
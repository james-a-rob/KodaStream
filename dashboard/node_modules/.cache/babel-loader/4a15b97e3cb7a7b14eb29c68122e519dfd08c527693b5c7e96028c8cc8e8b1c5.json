{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { parseFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nfunction useIsFetching(arg1, arg2, arg3) {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3);\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const queryCache = queryClient.getQueryCache();\n  return useSyncExternalStore(React.useCallback(onStoreChange => queryCache.subscribe(notifyManager.batchCalls(onStoreChange)), [queryCache]), () => queryClient.isFetching(filters), () => queryClient.isFetching(filters));\n}\nexport { useIsFetching };","map":{"version":3,"names":["useIsFetching","arg1","arg2","arg3","filters","options","parseFilterArgs","queryCache","queryClient","getQueryCache","useSyncExternalStore","React","useCallback","onStoreChange","subscribe","notifyManager","batchCalls","isFetching"],"sources":["/Users/jamesrobertson/Code/air/dashboard/node_modules/@tanstack/react-query/src/useIsFetching.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { notifyManager, parseFilterArgs } from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { ContextOptions } from './types'\nimport type { QueryFilters, QueryKey } from '@tanstack/query-core'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n"],"mappings":";;;;;;AAiBO,SAAAA,cAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAKL,OAAAC,OAAA,EAAAC,OAAA,SAAAC,eAAA,CAAAL,IAAA,EAAAC,IAAA,EAAAC,IAAA;;;EACmC;EACnC,MAAAI,UAAA,GAAAC,WAAA,CAAAC,aAAA;EAEA,OAAAC,oBAAA,CAAAC,KAAA,CAAAC,WAAA,CAAAC,aAAA,IAAAN,UAAA,CAAAO,SAAA,CAAAC,aAAA,CAAAC,UAAA,CAAAH,aAAA,KAAAN,UAAA,UAAAC,WAAA,CAAAS,UAAA,CAAAb,OAAA,SAAAI,WAAA,CAAAS,UAAA,CAAAb,OAAA;AASD"},"metadata":{},"sourceType":"module","externalDependencies":[]}
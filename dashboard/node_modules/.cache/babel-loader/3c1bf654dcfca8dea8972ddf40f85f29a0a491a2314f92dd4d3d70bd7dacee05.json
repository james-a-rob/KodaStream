{"ast":null,"code":"import { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\nclass QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n      this.updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n  destroy() {\n    this.listeners = new Set();\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n    if (process.env.NODE_ENV !== 'production' && typeof (options == null ? void 0 : options.isDataEqual) !== 'undefined') {\n      this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n    }\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this\n      });\n    }\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result, options)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.currentResult = result;\n      this.currentResultOptions = this.options;\n      this.currentResultState = this.currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.currentResult;\n  }\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({\n      ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  computeRefetchInterval() {\n    var _this$options$refetch;\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n  clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }\n  clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n    if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n            this.selectError = selectError;\n          }\n        }\n      }\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n        isPlaceholderData = true;\n      }\n    }\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n    const isFetching = fetchStatus === 'fetching';\n    const isLoading = status === 'loading';\n    const isError = status === 'error';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const {\n        notifyOnChangeProps\n      } = this.options;\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n    this.notify({\n      ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n    if (query === this.currentQuery) {\n      return;\n    }\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n    this.updateResult(notifyOptions);\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({\n          listener\n        }) => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n}\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n} // this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\n\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult, options) {\n  // it is important to keep this condition like this for three reasons:\n  // 1. It will get removed in the v5\n  // 2. it reads: don't update the properties if we want to keep the previous\n  // data.\n  // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n  // and will result in a bad decision\n  if (options.keepPreviousData) {\n    return false;\n  } // this means we want to put some placeholder data when pending and queryKey\n  // changed.\n\n  if (options.placeholderData !== undefined) {\n    // re-assign properties only if current data is placeholder data\n    // which means that data did not arrive yet, so, if there is some cached data\n    // we need to \"prepare\" to receive it\n    return optimisticResult.isPlaceholderData;\n  } // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n\n  if (observer.getCurrentResult() !== optimisticResult) {\n    return true;\n  } // basically, just keep previous properties if nothing changed\n\n  return false;\n}\nexport { QueryObserver };","map":{"version":3,"names":["QueryObserver","Subscribable","constructor","client","options","trackedProps","Set","selectError","bindMethods","setOptions","remove","bind","refetch","onSubscribe","listeners","size","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","process","env","NODE_ENV","isDataEqual","getLogger","error","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","build","result","createResult","shouldAssignObserverCurrentProperties","currentResult","currentResultOptions","currentResultState","state","getCurrentResult","trackResult","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","refetchPage","fetch","meta","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","cancelRefetch","promise","throwOnError","catch","noop","isServer","isStale","isValidTimeout","time","timeUntilStale","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","data","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","replaceData","placeholderData","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","notifyOnChangeProps","includedProps","useErrorBoundary","some","typedKey","changed","has","onQueryUpdate","action","onSuccess","manual","isCancelledError","onError","notifyManager","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","call","onSettled","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime","optimisticResult"],"sources":["/Users/jamesrobertson/Code/air/dashboard/node_modules/@tanstack/query-core/src/queryObserver.ts"],"sourcesContent":["import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Action, FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result, options)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.currentResult = result\n      this.currentResultOptions = this.options\n      this.currentResultState = this.currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n) {\n  // it is important to keep this condition like this for three reasons:\n  // 1. It will get removed in the v5\n  // 2. it reads: don't update the properties if we want to keep the previous\n  // data.\n  // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n  // and will result in a bad decision\n  if (options.keepPreviousData) {\n    return false\n  }\n\n  // this means we want to put some placeholder data when pending and queryKey\n  // changed.\n  if (options.placeholderData !== undefined) {\n    // re-assign properties only if current data is placeholder data\n    // which means that data did not arrive yet, so, if there is some cached data\n    // we need to \"prepare\" to receive it\n    return optimisticResult.isPlaceholderData\n  }\n\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (observer.getCurrentResult() !== optimisticResult) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
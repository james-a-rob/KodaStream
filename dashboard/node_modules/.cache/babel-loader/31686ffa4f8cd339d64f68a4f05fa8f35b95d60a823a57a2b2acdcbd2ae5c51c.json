{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { parseMutationFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nfunction useIsMutating(arg1, arg2, arg3) {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3);\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const mutationCache = queryClient.getMutationCache();\n  return useSyncExternalStore(React.useCallback(onStoreChange => mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)), [mutationCache]), () => queryClient.isMutating(filters), () => queryClient.isMutating(filters));\n}\nexport { useIsMutating };","map":{"version":3,"names":["useIsMutating","arg1","arg2","arg3","filters","options","parseMutationFilterArgs","mutationCache","queryClient","getMutationCache","useSyncExternalStore","React","useCallback","onStoreChange","subscribe","notifyManager","batchCalls","isMutating"],"sources":["/Users/jamesrobertson/Code/air/dashboard/node_modules/@tanstack/react-query/src/useIsMutating.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { notifyManager, parseMutationFilterArgs } from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport type { MutationFilters, MutationKey } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options,\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options,\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const mutationCache = queryClient.getMutationCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [mutationCache],\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters),\n  )\n}\n"],"mappings":";;;;;;AAoBO,SAAAA,cAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAKL,OAAAC,OAAA,EAAAC,OAAA,SAAAC,uBAAA,CAAAL,IAAA,EAAAC,IAAA,EAAAC,IAAA;;;EAEmC;EACnC,MAAAI,aAAA,GAAAC,WAAA,CAAAC,gBAAA;EAEA,OAAAC,oBAAA,CAAAC,KAAA,CAAAC,WAAA,CAAAC,aAAA,IAAAN,aAAA,CAAAO,SAAA,CAAAC,aAAA,CAAAC,UAAA,CAAAH,aAAA,KAAAN,aAAA,UAAAC,WAAA,CAAAS,UAAA,CAAAb,OAAA,SAAAI,WAAA,CAAAS,UAAA,CAAAb,OAAA;AASD"},"metadata":{},"sourceType":"module","externalDependencies":[]}